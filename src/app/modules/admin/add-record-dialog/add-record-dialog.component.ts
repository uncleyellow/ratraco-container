import { Component, EventEmitter, Input, Output, OnInit, Inject } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { environment } from '../../../../environments/environment';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-add-record-dialog',
  templateUrl: './add-record-dialog.component.html',
  styleUrls: ['./add-record-dialog.component.scss']
})
export class AddRecordDialogComponent implements OnInit {
  @Input() columns: string[] = [];
  @Input() selectedTable: string = '';
  @Input() visible: boolean = false;
  @Output() close = new EventEmitter<void>();
  @Output() success = new EventEmitter<void>();

  form: FormGroup = this.fb.group({});
  displayedColumns: string[] = [];
  editableColumns: string[] = [];
  selectedTableName: string = '';
  isLoading: boolean = false;
  formSubmitted: boolean = false;

  constructor(
    private fb: FormBuilder, 
    private http: HttpClient,
    private dialogRef: MatDialogRef<AddRecordDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {
    // Nh·∫≠n d·ªØ li·ªáu t·ª´ parent component
    if (data) {
      this.displayedColumns = data.displayedColumns || [];
      this.editableColumns = data.editableColumns || [];
      this.selectedTableName = data.selectedTable || '';
    }
  }

  ngOnInit() {
    this.initializeForm();
    this.setupFormValidation();
  }

  private initializeForm(): void {
    const group: any = {};
    
    // T·∫°o form cho t·∫•t c·∫£ c√°c c·ªôt c√≥ th·ªÉ ch·ªânh s·ª≠a - KH√îNG c√≥ validation b·∫Øt bu·ªôc
    this.editableColumns.forEach(col => {
      if (col === 'STT') {
        // STT s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o
        group[col] = [''];
      } else {
        // T·∫•t c·∫£ c√°c c·ªôt kh√°c ƒë·ªÅu kh√¥ng b·∫Øt bu·ªôc
        group[col] = [''];
      }
    });
    
    this.form = this.fb.group(group);
  }

  private setupFormValidation(): void {
    // B·ªè validation real-time ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a
    // this.form.valueChanges.subscribe(() => {
    //   if (this.formSubmitted) {
    //     this.validateForm();
    //   }
    // });
  }

  private validateForm(): void {
    // B·ªè validation ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a
    // Object.keys(this.form.controls).forEach(key => {
    //   const control = this.form.get(key);
    //   if (control) {
    //     control.markAsTouched();
    //   }
    // });
  }

  private futureDateValidator() {
    // B·ªè validation date ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a
    return (control: any) => {
      return null; // Kh√¥ng c√≥ validation
    };
  }

  private isDateTimeColumn(column: string): boolean {
    return [
      'Ng√†y gi·ªù t√†u ƒë·∫øn ga', 'Gi·ªù b·∫Øt ƒë·∫ßu d·ª°n c·∫Øt xe', 'Gi·ªù k·∫øt th√∫c d·ª°n c·∫Øt xe',
      'Gi·ªù b·∫Øt ƒë·∫ßu n·ªëi xe', 'Gi·ªù k·∫øt th√∫c n·ªëi xe', 'Ng√†y gi·ªù t√†u ch·∫°y'
    ].includes(column);
  }

  async onSubmit() {
    this.formSubmitted = true;
    
    // B·ªè ki·ªÉm tra form.invalid ƒë·ªÉ cho ph√©p submit v·ªõi form tr·ªëng
    // if (this.form.invalid) {
    //   await this.showValidationError();
    //   return;
    // }

    // B·ªè ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    // const requiredFields = this.getRequiredFields();
    // const missingFields = this.checkMissingFields(requiredFields);
    
    // if (missingFields.length > 0) {
    //   await this.showMissingFieldsError(missingFields);
    //   return;
    // }

    try {
      this.isLoading = true;
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i l√™n API
      const formValues = this.form.value;
      const values: any[] = [];
      
      // T·∫°o m·∫£ng values theo th·ª© t·ª± c·ªßa displayedColumns
      this.displayedColumns.forEach(col => {
        if (this.editableColumns.includes(col)) {
          // L·∫•y gi√° tr·ªã t·ª´ form
          let value = formValues[col] || '';
          
          // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c·ªôt STT
          if (col === 'STT') {
            value = this.generateNextSTT();
          }
          
          // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√°c c·ªôt th·ªùi gian
          if (this.isDateTimeColumn(col) && value) {
            value = this.formatDateTimeForApi(value);
          }
          
          values.push(value);
        } else {
          // C√°c c·ªôt kh√¥ng th·ªÉ ch·ªânh s·ª≠a
          values.push('');
        }
      });

      // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi g·ª≠i
      const confirmed = await this.showConfirmationDialog(values);
      if (!confirmed) {
        return;
      }

      // G·ª≠i d·ªØ li·ªáu l√™n API
      const apiUrl = `${environment.apiUrl}/${this.selectedTableName}/add`;
      const response = await this.http.post(apiUrl, { values }).toPromise();
      
      await this.showSuccessMessage();
      this.dialogRef.close({ success: true, data: response });
      
    } catch (error) {
      console.error('Error adding record:', error);
      await this.showErrorMessage('L·ªói khi th√™m b·∫£n ghi', 'Vui l√≤ng th·ª≠ l·∫°i sau');
    } finally {
      this.isLoading = false;
    }
  }

  private getRequiredFields(): string[] {
    // B·ªè t·∫•t c·∫£ validation b·∫Øt bu·ªôc
    return [];
  }

  private checkMissingFields(requiredFields: string[]): string[] {
    // B·ªè ki·ªÉm tra missing fields
    return [];
  }

  private async showMissingFieldsError(missingFields: string[]): Promise<void> {
    await Swal.fire({
      title: '<span class="text-red-600">‚ö†Ô∏è Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc</span>',
      html: `
        <div class="text-left">
          <p class="text-gray-700 mb-4 font-medium">Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng sau:</p>
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <ul class="space-y-2">
              ${missingFields.map(field => `
                <li class="flex items-center gap-2 text-red-700">
                  <i class="fas fa-exclamation-circle text-red-500"></i>
                  <span class="font-medium">${field}</span>
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      `,
      icon: 'warning',
      confirmButtonText: '<i class="fas fa-check mr-2"></i>ƒê√£ hi·ªÉu',
      confirmButtonColor: '#ea580c',
      customClass: {
        popup: 'rounded-2xl',
        confirmButton: 'rounded-xl px-6 py-3 font-semibold'
      }
    });
  }

  private async showConfirmationDialog(values: any[]): Promise<boolean> {
    const result = await Swal.fire({
      title: '<span class="text-orange-600">üìù X√°c nh·∫≠n th√™m b·∫£n ghi</span>',
      html: `
        <div class="text-left">
          <p class="text-gray-700 mb-4 font-medium">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m b·∫£n ghi m·ªõi v·ªõi th√¥ng tin:</p>
          <div class="bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-xl p-4 space-y-3">
            ${this.editableColumns.map((col, index) => {
              const value = values[index] || 'N/A';
              return `
                <div class="flex items-center justify-between p-2 bg-white rounded-lg border border-orange-100">
                  <span class="font-semibold text-gray-700">${col}:</span>
                  <span class="text-orange-600 font-medium">${value}</span>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: '<i class="fas fa-plus mr-2"></i>Th√™m b·∫£n ghi',
      cancelButtonText: '<i class="fas fa-times mr-2"></i>H·ªßy',
      confirmButtonColor: '#ea580c',
      cancelButtonColor: '#6b7280',
      customClass: {
        popup: 'rounded-2xl',
        confirmButton: 'rounded-xl px-6 py-3 font-semibold',
        cancelButton: 'rounded-xl px-6 py-3 font-semibold'
      },
      width: 600
    });
    
    return result.isConfirmed;
  }

  private generateNextSTT(): string {
    // T·∫°o STT m·ªõi d·ª±a tr√™n STT hi·ªán t·∫°i
    // Logic n√†y c√≥ th·ªÉ ƒë∆∞·ª£c c·∫£i thi·ªán t√πy theo y√™u c·∫ßu c·ª• th·ªÉ
    
    // N·∫øu c√≥ d·ªØ li·ªáu t·ª´ parent component, c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o STT
    if (this.data && this.data.currentData) {
      const currentData = this.data.currentData;
      if (currentData.length > 0) {
        // T√¨m STT l·ªõn nh·∫•t hi·ªán t·∫°i
        let maxSTT = 0;
        currentData.forEach((row: any) => {
          const stt = parseInt(row['STT']) || 0;
          if (stt > maxSTT) {
            maxSTT = stt;
          }
        });
        return (maxSTT + 1).toString();
      }
    }
    
    // Fallback: t·∫°o STT d·ª±a tr√™n timestamp
    return new Date().getTime().toString().slice(-6);
  }

  private formatDateTimeForApi(value: string): string {
    if (!value) return '';
    
    try {
      const date = new Date(value);
      if (!isNaN(date.getTime())) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}/${month}/${day} ${hours}:${minutes}:00`;
      }
    } catch (error) {
      console.error('Error formatting datetime:', error);
    }
    
    return value;
  }

  private async showValidationError(): Promise<void> {
    const errors = this.getFormErrors();
    await Swal.fire({
      title: '<span class="text-red-600">‚ùå L·ªói x√°c th·ª±c</span>',
      html: `
        <div class="text-left">
          <p class="text-gray-700 mb-4 font-medium">Vui l√≤ng ki·ªÉm tra c√°c tr∆∞·ªùng sau:</p>
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <ul class="space-y-2">
              ${errors.map(error => `
                <li class="flex items-center gap-2 text-red-700">
                  <i class="fas fa-exclamation-triangle text-red-500"></i>
                  <span>${error}</span>
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      `,
      icon: 'error',
      confirmButtonText: '<i class="fas fa-check mr-2"></i>ƒê√≥ng',
      confirmButtonColor: '#dc2626',
      customClass: {
        popup: 'rounded-2xl',
        confirmButton: 'rounded-xl px-6 py-3 font-semibold'
      }
    });
  }

  private getFormErrors(): string[] {
    const errors: string[] = [];
    
    Object.keys(this.form.controls).forEach(key => {
      const control = this.form.get(key);
      if (control?.errors) {
        if (control.errors['required']) {
          errors.push(`${key} l√† b·∫Øt bu·ªôc`);
        } else if (control.errors['minlength']) {
          errors.push(`${key} ph·∫£i c√≥ √≠t nh·∫•t ${control.errors['minlength'].requiredLength} k√Ω t·ª±`);
        } else if (control.errors['pattern']) {
          if (key === 'M√°c t√†u') {
            errors.push(`${key} ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ hoa v√† s·ªë`);
          } else if (key.includes('S·ªë l∆∞·ª£ng xe')) {
            errors.push(`${key} ph·∫£i c√≥ ƒë·ªãnh d·∫°ng: "X xe (T01, T02, ...)"`);
          }
        } else if (control.errors['pastDate']) {
          errors.push(`${key} kh√¥ng ƒë∆∞·ª£c l√† th·ªùi gian trong qu√° kh·ª©`);
        }
      }
    });
    
    return errors;
  }

  private async showSuccessMessage(): Promise<void> {
    await Swal.fire({
      title: '<span class="text-green-600">üéâ Th√†nh c√¥ng!</span>',
      text: 'ƒê√£ th√™m b·∫£n ghi m·ªõi v√†o b·∫£ng',
      icon: 'success',
      timer: 3000,
      timerProgressBar: true,
      showConfirmButton: false,
      customClass: {
        popup: 'rounded-2xl',
        timerProgressBar: 'bg-green-500'
      }
    });
  }

  private async showErrorMessage(title: string, message: string): Promise<void> {
    await Swal.fire({
      title: `<span class="text-red-600">‚ùå ${title}</span>`,
      text: message,
      icon: 'error',
      confirmButtonText: '<i class="fas fa-check mr-2"></i>ƒê√≥ng',
      confirmButtonColor: '#dc2626',
      customClass: {
        popup: 'rounded-2xl',
        confirmButton: 'rounded-xl px-6 py-3 font-semibold'
      }
    });
  }

  onClose() {
    this.dialogRef.close();
  }

  // Helper method ƒë·ªÉ l·∫•y placeholder cho input
  getPlaceholder(column: string): string {
    const placeholders: Record<string, string> = {
      'M√°c t√†u': 'Nh·∫≠p m√°c t√†u (VD: SE1, SE2)',
      'Ng√†y gi·ªù t√†u ƒë·∫øn ga': 'Ch·ªçn ng√†y gi·ªù t√†u ƒë·∫øn ga',
      'Gi·ªù b·∫Øt ƒë·∫ßu d·ª°n c·∫Øt xe': 'Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu d·ª°n c·∫Øt xe',
      'Gi·ªù k·∫øt th√∫c d·ª°n c·∫Øt xe': 'Ch·ªçn gi·ªù k·∫øt th√∫c d·ª°n c·∫Øt xe',
      'Gi·ªù b·∫Øt ƒë·∫ßu n·ªëi xe': 'Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu n·ªëi xe',
      'Gi·ªù k·∫øt th√∫c n·ªëi xe': 'Ch·ªçn gi·ªù k·∫øt th√∫c n·ªëi xe',
      'S·ªë l∆∞·ª£ng xe c·∫Øt(ghi r√µ s·ªë toa xe)': 'VD: 5 xe (T01, T02, T03, T04, T05)',
      'S·ªë l∆∞·ª£ng xe n·ªëi(ghi r√µ s·ªë toa xe)': 'VD: 3 xe (T06, T07, T08)',
      'Ng√†y gi·ªù t√†u ch·∫°y': 'Ch·ªçn ng√†y gi·ªù t√†u ch·∫°y',
      'S·ªë xe c√≥ v·∫≠n ƒë∆°n kh√¥ng ph·∫£i c·ªßa RAT': 'Nh·∫≠p th√¥ng tin xe kh√¥ng ph·∫£i RAT'
    };
    return placeholders[column] || `Nh·∫≠p ${column.toLowerCase()}`;
  }

  // Helper method ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i input
  getInputType(column: string): string {
    if (this.isDateTimeColumn(column)) {
      return 'datetime-local';
    } else if (column.includes('S·ªë l∆∞·ª£ng xe')) {
      return 'text';
    } else if (column === 'M√°c t√†u') {
      return 'text';
    } else {
      return 'text';
    }
  }

  // Method ƒë·ªÉ ki·ªÉm tra xem field c√≥ l·ªói kh√¥ng - B·ªè validation
  hasFieldError(fieldName: string): boolean {
    return false; // Kh√¥ng c√≥ l·ªói n√†o
  }

  // Method ƒë·ªÉ l·∫•y error message cho field - B·ªè error messages
  getFieldErrorMessage(fieldName: string): string {
    return ''; // Kh√¥ng c√≥ error message
  }

  // Method ƒë·ªÉ l·∫•y hint cho field
  getFieldHint(fieldName: string): string {
    const hints: Record<string, string> = {
      'M√°c t√†u': 'Ch·ªâ nh·∫≠p ch·ªØ hoa v√† s·ªë (VD: SE1, SE2, TN1)',
      'Ng√†y gi·ªù t√†u ƒë·∫øn ga': 'Ch·ªçn th·ªùi gian trong t∆∞∆°ng lai',
      'Gi·ªù b·∫Øt ƒë·∫ßu d·ª°n c·∫Øt xe': 'Ch·ªçn th·ªùi gian trong t∆∞∆°ng lai',
      'Gi·ªù k·∫øt th√∫c d·ª°n c·∫Øt xe': 'Ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu d·ª°n c·∫Øt xe',
      'Gi·ªù b·∫Øt ƒë·∫ßu n·ªëi xe': 'Ch·ªçn th·ªùi gian trong t∆∞∆°ng lai',
      'Gi·ªù k·∫øt th√∫c n·ªëi xe': 'Ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu n·ªëi xe',
      'S·ªë l∆∞·ª£ng xe c·∫Øt(ghi r√µ s·ªë toa xe)': 'ƒê·ªãnh d·∫°ng: "5 xe (T01, T02, T03, T04, T05)"',
      'S·ªë l∆∞·ª£ng xe n·ªëi(ghi r√µ s·ªë toa xe)': 'ƒê·ªãnh d·∫°ng: "3 xe (T06, T07, T08)"',
      'Ng√†y gi·ªù t√†u ch·∫°y': 'Ph·∫£i sau gi·ªù k·∫øt th√∫c n·ªëi xe',
      'S·ªë xe c√≥ v·∫≠n ƒë∆°n kh√¥ng ph·∫£i c·ªßa RAT': 'Ghi r√µ s·ªë toa xe n·∫øu c√≥'
    };
    
    return hints[fieldName] || '';
  }
} 